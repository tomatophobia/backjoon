import sys

input = sys.stdin.readline

N, M = map(int, input().rstrip().split(' '))

board = []
for i in range(N):
    line = list(map(int, input().rstrip().split(' ')))
    board.append(line)

mv = 0

# 사각형
all = [[(0, 0), (0, 1), (1, 0), (1, 1)],  # ㅁ
       [(0, 0), (0, 1), (0, 2), (0, 3)],  # ㅡ
       [(0, 0), (1, 0), (2, 0), (3, 0)],  # ㅣ
       [(0, 0), (0, 1), (1, 1), (2, 1)],  # ㄱ
       [(1, 0), (1, 1), (1, 2), (0, 2)],
       [(0, 0), (1, 0), (2, 0), (2, 1)],
       [(0, 0), (1, 0), (0, 1), (0, 2)],
       [(0, 0), (0, 1), (1, 0), (2, 0)],  # 뒤집은 ㄱ
       [(0, 0), (0, 1), (0, 2), (1, 2)],
       [(0, 1), (1, 1), (2, 1), (2, 0)],
       [(0, 0), (1, 0), (1, 1), (1, 2)],
       [(1, 0), (1, 1), (1, 2), (0, 1)],  # ㅗ
       [(0, 0), (1, 0), (2, 0), (1, 1)],  # ㅏ
       [(0, 0), (0, 1), (0, 2), (1, 1)],  # ㅜ
       [(1, 0), (1, 1), (0, 1), (2, 1)],  # ㅓ
       [(1, 0), (1, 1), (0, 1), (0, 2)],  # s
       [(0, 0), (1, 0), (1, 1), (2, 1)],
       [(0, 0), (0, 1), (1, 1), (1, 2)],  # 뒤집은 s
       [(0, 1), (1, 1), (1, 0), (2, 0)]]
for tetro in all:
    mi = max(map(lambda x: x[0], tetro))
    mj = max(map(lambda x: x[1], tetro))
    for i in range(N - mi):
        for j in range(M - mj):
            v = 0
            for t in tetro:
                v += board[i + t[0]][j + t[1]]
            if v > mv:
                mv = v
print(mv)
